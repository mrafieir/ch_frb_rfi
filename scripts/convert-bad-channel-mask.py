#!/usr/bin/env python
import datetime
import numpy as np


today = str(datetime.date.today())

# This script converts a boolean 1K mask to the standard L1 mask which is based on frequency intervals.

# full path to the output file
output_file_path = '/data/chimefrb/badchannel_mask_%s.dat' % today

# comments to be included in the beginning of the file
comments = ('#\n# This mask was generated by ch_frb_rfi/scripts/convert-bad-channel-mask.py\n'+
            '# on %s.\n#\n'%today)

# CHIMEFRB freq band
min_freq = 400.0
max_freq = 800.0

# ideally this should be read from a static directory!
mask = [0, 1, 2, 3, 4, 33, 34, 39, 45, 50, 52, 62, 64, 71, 81, 82,
        94, 96, 97, 101, 104, 105, 106, 107, 108, 109, 110, 111,
        112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123,
        124, 125, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150,
        151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162,
        163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174,
        175, 176, 177, 178, 185, 191, 198, 203, 217, 220, 223, 225,
        226, 237, 248, 250, 255, 256, 265, 267, 268, 269, 273, 276,
        289, 295, 304, 306, 308, 318, 320, 327, 337, 338, 350, 357,
        364, 366, 370, 373, 381, 384, 387, 393, 420, 426, 441, 447,
        454, 459, 473, 479, 481, 482, 497, 504, 506, 511, 512, 521,
        532, 545, 551, 553, 554, 555, 556, 557, 558, 559, 560, 561,
        562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573,
        574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585,
        586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597,
        598, 599, 606, 613, 620, 622, 626, 629, 630, 631, 632, 633,
        634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645,
        646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657,
        658, 659, 660, 676, 677, 678, 679, 680, 681, 682, 683, 684,
        685, 686, 687, 688, 689, 690, 691, 697, 710, 715, 735, 737,
        738, 749, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761,
        762, 763, 764, 765, 766, 767, 768, 769, 777, 781, 782, 783,
        784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795,
        796, 797, 798, 807, 808, 809, 810, 818, 820, 830, 832, 839,
        846, 847, 848, 849, 850, 851, 855, 857, 858, 859, 862, 864,
        869, 870, 874, 875, 876, 878, 880, 882, 885, 887, 889, 893,
        895, 899, 905, 906, 907, 915, 920, 928, 930, 932, 933, 935,
        937, 938, 945, 953, 959, 961, 966, 971, 973, 974, 975, 976,
        977, 978, 985, 986, 987, 989, 990, 991, 993, 994, 997, 1005,
        1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023]

# convert to a numpy array
mask = np.asarray(mask, dtype=np.float64)

# the scaling factor for 1K freq channels
scale = 1024 / (max_freq - min_freq)

# convert indexes to freq values
mask /= scale

# shift to match the freq band, assuming that the order of indexes is reversed
mask = 800.0 - mask

# convert to a standard L1 format
mask = zip(mask-(1.0/scale), mask)

# write to disk
with open(output_file_path, 'w') as _file:
    _file.write(comments)
    for i in mask:
        _file.write('%s,%s\n' % i)

print 'Wrote the new mask %s to disk.' % output_file_path 
